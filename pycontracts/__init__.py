import os
from glob import glob
from binascii import unhexlify

contracts = {
    "Forward": {
        "version": "v1.0-RC1",
        "abi": '[{"constant":false,"inputs":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"},{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"input","type":"bytes"}],"name":"forward","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"bytes","name":"","type":"bytes"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"getOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"input","type":"bytes"}],"name":"signingData","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"}]',
        "deploy": unhexlify("608060405234801561001057600080fd5b506040516105bb3803806105bb8339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091178155600155610553806100686000396000f3fe60806040526004361061003f5760003560e01c8063823bee8a14610041578063893d20e814610195578063d087d288146101c6578063eb258a05146101ed575b005b610112600480360360c081101561005757600080fd5b60ff823516916020810135916040820135916001600160a01b03606082013516916080820135919081019060c0810160a082013564010000000081111561009d57600080fd5b8201836020820111156100af57600080fd5b803590602001918460018302840111640100000000831117156100d157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102b5945050505050565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610159578181015183820152602001610141565b50505050905090810190601f1680156101865780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156101a157600080fd5b506101aa610443565b604080516001600160a01b039092168252519081900360200190f35b3480156101d257600080fd5b506101db610452565b60408051918252519081900360200190f35b3480156101f957600080fd5b506101db6004803603606081101561021057600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561024057600080fd5b82018360208201111561025257600080fd5b8035906020019184600183028401116401000000008311171561027457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610458945050505050565b600080546060906001600160a01b031660016102d2878787610458565b8a8a8a60405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561032c573d6000803e3d6000fd5b505050602060405103516001600160a01b031614610385576040805162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b604482015290519081900360640190fd5b600180548101905560405183516001600160a01b038716918691869190819060208401908083835b602083106103cc5780518252601f1990920191602091820191016103ad565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461042e576040519150601f19603f3d011682016040523d82523d6000602084013e610433565b606091505b5091509150965096945050505050565b6000546001600160a01b031690565b60015490565b6000606082516080016040519080825280601f01601f19166020018201604052801561048b576020820181803883390190505b50600154306020808401829052604084018390526060840189905260808401889052865193945060a08501939087019291906104ca90859085906104e0565b8480519060200120955050505050509392505050565b5b60208110610500578151835260209283019290910190601f19016104e1565b905182516020929092036101000a600019018019909116911617905256fea265627a7a72315820170df2a3c6a1cbbdf735045bb1cbb029cdece9bede3077ff789c5e71a0d7399464736f6c634300050b0032"),
    },
    "further": {
        "version": "v1.0-RC1",
        "deploy": unhexlify("60005558600f0180380380916000396000f3366300000018576000546000526001546020526034600cf35b3060005260015460205260413603604160403760013603600020600052600060205260416000603f3760206000608060008060015af11563000000d8573d1563000000d857600054600051141563000000d8576001808054019055608180360380916000376000809160006061356041355af11563000000ce57600160005b5260406020523d6040523d60203d061563000000c157602090046020028060200190606001600090525b3d600060603e6060016000f35b6000806300000097565b600080fd"),
    },
}

contracts_path = os.getenv("CONTRACT_BUILD_PATH")
contracts_version = os.getenv("CONTRACTS_VERSION")
if contracts_path is not None:
    for contract in glob(os.path.join(contracts_path, "[!.]*.bin")):
        name = os.path.basename(contract)[:-4]

        if name in contracts and contracts[name]["version"] == contracts_version:
            continue

        with open(contract, "rb") as h:
            contracts[name] = { 'deploy': unhexlify(h.read()) }

        abi = contract[:-4] + ".abi"
        if os.path.isfile(abi):
            with open(abi, "r") as h:
                contracts[name]['abi'] = h.read()

        init = contract[:-4] + ".init.bin"
        if os.path.isfile(init):
            with open(init, "r") as h:
                contracts[name]['init'] = unhexlify(h.read())

        runtime = contract[:-4] + ".runtime.bin"
        if os.path.isfile(runtime):
            with open(runtime, "r") as h:
                contracts[name]['runtime'] = unhexlify(h.read())
